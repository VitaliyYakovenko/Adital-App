{"version":3,"file":"static/js/959.654f83c7.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/GanresName/GenresName.module.css?bbcc","components/GanresName/GanresName.tsx","webpack://react-homework-template/./src/components/GenresList/GenresList.module.css?2939","components/GenresList/GenresList.tsx","pages/Genres/Genres.tsx","utils/processData.ts","rest-api/getAllGamesForGenres.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"genreNameBox\":\"GenresName_genreNameBox__n411U\",\"genreName\":\"GenresName_genreName__xS+hA\"};","import css from \"./GenresName.module.css\";\n\ninterface IProp {\n    genres: string,\n    onToggle: (genres:string) => void;\n};\n\n\nexport default function GenresName({onToggle, genres }: IProp) {\n    const handleGenreClick = () => {\n        onToggle(genres);\n    }\n\n    return (\n        <div className={css.genreNameBox}>\n            <h2 onClick={handleGenreClick} className={css.genreName}>{genres}</h2>\n        </div>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"gameList\":\"GenresList_gameList__qypU2\",\"active\":\"GenresList_active__NCUfU\",\"gameItem\":\"GenresList_gameItem__dWLUR\",\"gameImg\":\"GenresList_gameImg__M9mjl\",\"gameName\":\"GenresList_gameName__nkxyt\"};","import IGamesObj from \"../../interfaces/IGamesObj\";\nimport css from \"./GenresList.module.css\";\n\ninterface IProp {\n    games: IGamesObj[];\n    isActive: boolean;\n}\n\nexport default function GenresList({isActive,games}:IProp) {\n\n// ul className={`${css.gameList} ${isActive ? 'active' : ''}`}\n    return (\n        <>\n            {isActive && <ul className={`${css.gameList} ${isActive ? 'active' : ''}`}>\n                {games.map(game => (\n                    <li className={css.gameItem} key={game.id}>\n                        <img\n                            width=\"300\" height=\"450\"\n                            src={game.img}\n                            alt=\"banner game\"\n                            className={css.gameImg}\n                        />\n                        <h3 className={css.gameName}>{game.name}</h3>\n                    </li>\n                ))}\n            </ul>}\n        </>\n    );\n};","import { useState, useEffect } from \"react\";\nimport { getAllGamesForGenres } from \"../../rest-api/getAllGamesForGenres\";\nimport processData from \"../../utils/processData\";\nimport GenresName from \"../../components/GanresName/GanresName\";\nimport GenresList from \"../../components/GenresList/GenresList\";\nimport utilsCss from \"../../utils.module.css\";\n\n\n\nexport default function Genres() {\n    const [games, setGames] = useState([]);\n    const [isExpanded, setIsExpanded] = useState<boolean>(false);\n    const [activeGenre, setActiveGenre] = useState<string | null>(null);\n    const filteredGames = processData(games);\n    \n \n    useEffect(() => { \n        getAllGamesForGenres().then(resp => setGames(resp));\n    }, []);\n   \n    const toggleExpand = (genre: string): void => {\n        setIsExpanded(!isExpanded);\n        setActiveGenre((prevGenre) => (prevGenre === genre ? null : genre));\n    };\n\n\n\n    return (\n        <div className={utilsCss.container}>\n            <ul>\n                {filteredGames.map((game, index) => (\n                    <li key={index}>\n                        <GenresName\n                            onToggle={toggleExpand}\n                            genres={game.genre} />\n                        {game.genre === activeGenre && (\n                            <GenresList\n                            isActive={game.genre === activeGenre}\n                            games={game.games} />\n                        )}\n                    </li>\n                ))}\n            </ul>\n        </div>);\n};","import IGamesObj from \"../interfaces/IGamesObj\";\n\ninterface ICategorizedData {\n  genre: string;\n  games: IGamesObj[];\n}\n\nexport default function processData(data: IGamesObj[]): ICategorizedData[] {\n  const categorizedData: ICategorizedData[] = [];\n\n  data.forEach((item) => {\n    const { genre } = item;\n\n    if (Array.isArray(genre)) {\n      genre.forEach((g) => {\n        const existingCategory = categorizedData.find((category) => category.genre === g);\n\n        if (existingCategory) {\n          existingCategory.games.push(item);\n        } else {\n          const newCategory: ICategorizedData = {\n            genre: g,\n            games: [item]\n          };\n          categorizedData.push(newCategory);\n        }\n      });\n    }\n  });\n\n\n  return categorizedData;\n}\n\n\n\n\n\n","import { BASE_URL } from \"./getAllTopGames\";\n\n\n\nexport function getAllGamesForGenres() {\n    return fetch(`${BASE_URL}/games`)\n        .then(resp => resp.json())\n        .catch(error => error.message);\n};"],"names":["GenresName","_ref","onToggle","genres","_jsx","className","css","children","onClick","GenresList","isActive","games","_Fragment","concat","map","game","_jsxs","width","height","src","img","alt","name","id","Genres","_useState","useState","_useState2","_slicedToArray","setGames","_useState3","_useState4","isExpanded","setIsExpanded","_useState5","_useState6","activeGenre","setActiveGenre","filteredGames","data","categorizedData","forEach","item","genre","Array","isArray","g","existingCategory","find","category","push","newCategory","processData","useEffect","fetch","BASE_URL","then","resp","json","catch","error","message","toggleExpand","prevGenre","utilsCss","index"],"sourceRoot":""}